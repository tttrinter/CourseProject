names(doc)
doc=read.fwf(htmlURL, widths=widths,skip=2)
names(doc)
head(doc)
doc=read.fwf(htmlURL, widths=widths,skip=3)
dox
doc
head(doc)
doc$week
doc$V1
widths=c(10,8,8,8,8)
doc=read.fwf(htmlURL, widths=widths,skip=3)
head(doc)
doc=read.fwf(htmlURL, widths=widths,skip=4)
head(doc)
widths
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="/t",strip.white=TRUE )
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t",strip.white=TRUE )
head(doc)
widths
widths=widths+5
widths
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t")
head(doc)
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", stril.white=TRUE)
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths(c(9,3,3,3,3,3,3,3,3))
widths = (c(9,3,3,3,3,3,3,3,3))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths = (c(14,3,3,3,3,3,3,3,3))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths = (c(14,4,3,4,3,4,3,4,3))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths = (c(14,4,3,4,3,4,3,4,3))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths = (c(15,4,3,4,3,4,3,4,3))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
widths = (c(15,4,3,4,3,4,3,4,3))
head(doc)
widths = (c(15,4,4,4,4,4,4,4,4))
widths = (c(15,4,3,4,3,4,3,4,3))
widths = (c(15,4,4,4,4,4,4,4,4))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths = (c(15,4,9,4,9,4,9,4,4))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
doc$V4
sum(doc$V4)
htmlDoc=read.html("http://biostat.jhsph.edu/~jleek/contact.html")
htmlDoc=URL("http://biostat.jhsph.edu/~jleek/contact.html")
htmlDoc=getURL("http://biostat.jhsph.edu/~jleek/contact.html")
library(html)
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readlines(con)
htmlCode=readLines(con)
htmlCode[01]
nchar(htmlCode[10])
nchar(htmlCode[100])
nchar(htmlCode[30])
htmlURL
rm(list=ls())
getwd()
origDir=getwd()
setwd("~/Coursera/Getting and Cleaning Data/CourseProject/UCI HAR Dataset/")
y_train <- read.table("./train/y_train.txt", quote="\"")
X_train <- read.table("./train/X_train.txt", quote="\"")
activity_labels <- read.table("activity_labels.txt", quote="\"")
features <- read.table("features.txt", quote="\"")
subject_train <- read.table("./train/subject_train.txt", quote="\"")
#Standard deviation features:
stddev_features=features$V1[grep("std",features$V2)]
stddev_names=as.character(features$V2[grep("std",features$V2)])
#Mean features:
mean_features=features$V1[grep("mean",features$V2)]
mean_names=as.character(features$V2[grep("mean",features$V2)])
#All features to get
features_to_get=c(stddev_features, mean_features)
cols_to_get=paste("V",features_to_get, sep="")
colNames=c(stddev_names, mean_names)
X_train_subset=subset(X_train, , select=cols_to_get)
names(X_train_subset)=colNames
view(X_train_subset)
View(X_train_subset)
view(Y_train)
View(Y_train)
view(y_train)
View(y_train
)
names(y_train)
unique(y_train$v1)
class(y_train$V1)
unique(y_train$v1, FALSE)
y_train$V1
unique(y_train$v1, incomparables=FALSE)
j=c(1,1,2,1,3)
unique(j)
unique(y_train$V1)
unique(y_train$v1)
unique(y_train$V1)
unique(y_train$v1)
unique(y_train$V1)
head(X_train)
X-train$testtrain="train"
X_train$testtrain="train"
names(X_train)
X_train$testtrain
head(y_train)
activityNames=cbind(activity_lables,y_train)
activity_labels
activityNames=cbind(activity_labels,y_train)
activityNames
activityNames=merge(activity_labels,y_train)
activityNames
X_train=cbind(X_train,activityNames)
head(X_train)
names(X_train)
X_train_subset
names(X_train_subset)
activityNames
rm(X_train)
X_train <- read.table("./train/X_train.txt", quote="\"")
X_train$activity=activityNames
names(X_train)
head(X_names)
head(X_train)
rm(X_train)
X_train <- read.table("./train/X_train.txt", quote="\"")
head(activityNames)
X_train$activity=activityNames$V2
head(X_train)
head(subject_train)
unique(subject_train$V1)
X_train$subject=subject_train$V1
head(X_train)
rm(list=ls())
origDir=getwd()
setwd("~/Coursera/Getting and Cleaning Data/CourseProject/UCI HAR Dataset/")
y_train <- read.table("./train/y_train.txt", quote="\"")
X_train <- read.table("./train/X_train.txt", quote="\"")
activity_labels <- read.table("activity_labels.txt", quote="\"")
features <- read.table("features.txt", quote="\"")
subject_train <- read.table("./train/subject_train.txt", quote="\"")
#Standard deviation features:
stddev_features=features$V1[grep("std",features$V2)]
stddev_names=as.character(features$V2[grep("std",features$V2)])
#Mean features:
mean_features=features$V1[grep("mean",features$V2)]
mean_names=as.character(features$V2[grep("mean",features$V2)])
#All features to get
features_to_get=c(stddev_features, mean_features)
cols_to_get=paste("V",features_to_get, sep="")
colNames=c(stddev_names, mean_names)
X_train_subset=subset(X_train, , select=cols_to_get)
names(X_train_subset)=colNames
#Add factor to ID observations as training data
X_train_subset$testtrain="train"
#Map the activity names and add factor
activityNames=merge(activity_labels,y_train)
X_train_subset$activity=activityNames$V2
#Add the subject Ids
X_train_subset$subjectId=subject_train$V1
setwd(origDir)
View(X_train_subset)
rm(list=ls())
#Getting and Cleaning Data - Course Project
# You should create one R script called run_analysis.R that does the following.
# Merges the training and the test sets to create one data set.
# Extracts only the measurements on the mean and standard deviation for each measurement.
# Uses descriptive activity names to name the activities in the data set
# Appropriately labels the data set with descriptive variable names.
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
origDir=getwd()
setwd("~/Coursera/Getting and Cleaning Data/CourseProject/UCI HAR Dataset/")
#Training Data
y_train <- read.table("./train/y_train.txt", quote="\"")
X_train <- read.table("./train/X_train.txt", quote="\"")
#Test Data
y_test <- read.table("./test/y_test.txt", quote="\"")
X_test <- read.table("./test/X_test.txt", quote="\"")
activity_labels <- read.table("activity_labels.txt", quote="\"")
features <- read.table("features.txt", quote="\"")
subject_train <- read.table("./train/subject_train.txt", quote="\"")
subject_test <- read.table("./train/subject_test.txt", quote="\"")
#Standard deviation features:
stddev_features=features$V1[grep("std",features$V2)]
stddev_names=as.character(features$V2[grep("std",features$V2)])
#Mean features:
mean_features=features$V1[grep("mean",features$V2)]
mean_names=as.character(features$V2[grep("mean",features$V2)])
#All features to get
features_to_get=c(stddev_features, mean_features)
cols_to_get=paste("V",features_to_get, sep="")
colNames=c(stddev_names, mean_names)
X_train_subset=subset(X_train, , select=cols_to_get)
names(X_train_subset)=colNames
X_test_subset=subset(X_test, , select=cols_to_get)
names(X_test_subset)=colNames
#Add factor to ID observations as training data
X_train_subset$testtrain="train"
X_test_subset$testtrain="test"
#Map the activity names and add factor
activityNames=merge(activity_labels,y_train)
X_train_subset$activity=activityNames$V2
activityNames=merge(activity_labels,y_test)
X_test_subset$activity=activityNames$V2
#Add the subject Ids
X_train_subset$subjectId=subject_train$V1
X_test_subset$subjectId=subject_test$V1
rm(list=("X_train","y_train","X_test","y_test"))
combinedDataset= merge(X_train_subset,X_test_subset,all=TRUE)
setwd(origDir)
head(combinedDataset)
rm(list=ls())
origDir=getwd()
setwd("~/Coursera/Getting and Cleaning Data/CourseProject/UCI HAR Dataset/")
#Training Data
y_train <- read.table("./train/y_train.txt", quote="\"")
X_train <- read.table("./train/X_train.txt", quote="\"")
#Test Data
y_test <- read.table("./test/y_test.txt", quote="\"")
X_test <- read.table("./test/X_test.txt", quote="\"")
activity_labels <- read.table("activity_labels.txt", quote="\"")
features <- read.table("features.txt", quote="\"")
subject_train <- read.table("./train/subject_train.txt", quote="\"")
subject_test <- read.table("./test/subject_test.txt", quote="\"")
#Standard deviation features:
stddev_features=features$V1[grep("std",features$V2)]
stddev_names=as.character(features$V2[grep("std",features$V2)])
#Mean features:
mean_features=features$V1[grep("mean",features$V2)]
mean_names=as.character(features$V2[grep("mean",features$V2)])
#All features to get
features_to_get=c(stddev_features, mean_features)
cols_to_get=paste("V",features_to_get, sep="")
colNames=c(stddev_names, mean_names)
X_train_subset=subset(X_train, , select=cols_to_get)
names(X_train_subset)=colNames
X_test_subset=subset(X_test, , select=cols_to_get)
names(X_test_subset)=colNames
#Add factor to ID observations as training data
X_train_subset$testtrain="train"
X_test_subset$testtrain="test"
#Map the activity names and add factor
activityNames=merge(activity_labels,y_train)
X_train_subset$activity=activityNames$V2
activityNames=merge(activity_labels,y_test)
X_test_subset$activity=activityNames$V2
#Add the subject Ids
X_train_subset$subjectId=subject_train$V1
X_test_subset$subjectId=subject_test$V1
rm(list=("X_train","y_train","X_test","y_test"))
combinedDataset= merge(X_train_subset,X_test_subset,all=TRUE)
setwd(origDir)
rm(list=ls())
#Getting and Cleaning Data - Course Project
# You should create one R script called run_analysis.R that does the following.
# Merges the training and the test sets to create one data set.
# Extracts only the measurements on the mean and standard deviation for each measurement.
# Uses descriptive activity names to name the activities in the data set
# Appropriately labels the data set with descriptive variable names.
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
origDir=getwd()
setwd("~/Coursera/Getting and Cleaning Data/CourseProject/UCI HAR Dataset/")
#Training Data
y_train <- read.table("./train/y_train.txt", quote="\"")
X_train <- read.table("./train/X_train.txt", quote="\"")
#Test Data
y_test <- read.table("./test/y_test.txt", quote="\"")
X_test <- read.table("./test/X_test.txt", quote="\"")
activity_labels <- read.table("activity_labels.txt", quote="\"")
features <- read.table("features.txt", quote="\"")
subject_train <- read.table("./train/subject_train.txt", quote="\"")
subject_test <- read.table("./test/subject_test.txt", quote="\"")
#Standard deviation features:
stddev_features=features$V1[grep("std",features$V2)]
stddev_names=as.character(features$V2[grep("std",features$V2)])
#Mean features:
mean_features=features$V1[grep("mean",features$V2)]
mean_names=as.character(features$V2[grep("mean",features$V2)])
#All features to get
features_to_get=c(stddev_features, mean_features)
cols_to_get=paste("V",features_to_get, sep="")
colNames=c(stddev_names, mean_names)
X_train_subset=subset(X_train, , select=cols_to_get)
names(X_train_subset)=colNames
X_test_subset=subset(X_test, , select=cols_to_get)
names(X_test_subset)=colNames
#Add factor to ID observations as training data
X_train_subset$testtrain="train"
X_test_subset$testtrain="test"
#Map the activity names and add factor
activityNames=merge(activity_labels,y_train)
X_train_subset$activity=activityNames$V2
activityNames=merge(activity_labels,y_test)
X_test_subset$activity=activityNames$V2
#Add the subject Ids
X_train_subset$subjectId=subject_train$V1
X_test_subset$subjectId=subject_test$V1
combinedDataset= merge(X_train_subset,X_test_subset,all=TRUE)
setwd(origDir)
ls()
ls(-combinedDataset)
ls(-"combinedDataset")
ls()
removelist=ls()
removelist[-"combinedDataset"]
names(removelist)
removelist[removelist!="combinedDataset"]
class(removelist)
rm(list=removelist)
rm(list=ls())
#Getting and Cleaning Data - Course Project
# You should create one R script called run_analysis.R that does the following.
# Merges the training and the test sets to create one data set.
# Extracts only the measurements on the mean and standard deviation for each measurement.
# Uses descriptive activity names to name the activities in the data set
# Appropriately labels the data set with descriptive variable names.
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
origDir=getwd()
setwd("~/Coursera/Getting and Cleaning Data/CourseProject/UCI HAR Dataset/")
#Training Data
y_train <- read.table("./train/y_train.txt", quote="\"")
X_train <- read.table("./train/X_train.txt", quote="\"")
#Test Data
y_test <- read.table("./test/y_test.txt", quote="\"")
X_test <- read.table("./test/X_test.txt", quote="\"")
activity_labels <- read.table("activity_labels.txt", quote="\"")
features <- read.table("features.txt", quote="\"")
subject_train <- read.table("./train/subject_train.txt", quote="\"")
subject_test <- read.table("./test/subject_test.txt", quote="\"")
#Standard deviation features:
stddev_features=features$V1[grep("std",features$V2)]
stddev_names=as.character(features$V2[grep("std",features$V2)])
#Mean features:
mean_features=features$V1[grep("mean",features$V2)]
mean_names=as.character(features$V2[grep("mean",features$V2)])
#All features to get
features_to_get=c(stddev_features, mean_features)
cols_to_get=paste("V",features_to_get, sep="")
colNames=c(stddev_names, mean_names)
X_train_subset=subset(X_train, , select=cols_to_get)
names(X_train_subset)=colNames
X_test_subset=subset(X_test, , select=cols_to_get)
names(X_test_subset)=colNames
#Add factor to ID observations as training data
X_train_subset$testtrain="train"
X_test_subset$testtrain="test"
#Map the activity names and add factor
activityNames=merge(activity_labels,y_train)
X_train_subset$activity=activityNames$V2
activityNames=merge(activity_labels,y_test)
X_test_subset$activity=activityNames$V2
#Add the subject Ids
X_train_subset$subjectId=subject_train$V1
X_test_subset$subjectId=subject_test$V1
#Clean up - removing all data but the combinedDataset
removelist=ls()
#running again to capture removelist!
removelist=ls()
removelist=removelist[removelist != "combinedDataset"]
rm(list=removelist)
combinedDataset= merge(X_train_subset,X_test_subset,all=TRUE)
setwd(origDir)
#Getting and Cleaning Data - Course Project
# You should create one R script called run_analysis.R that does the following.
# Merges the training and the test sets to create one data set.
# Extracts only the measurements on the mean and standard deviation for each measurement.
# Uses descriptive activity names to name the activities in the data set
# Appropriately labels the data set with descriptive variable names.
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
origDir=getwd()
setwd("~/Coursera/Getting and Cleaning Data/CourseProject/UCI HAR Dataset/")
#Training Data
y_train <- read.table("./train/y_train.txt", quote="\"")
X_train <- read.table("./train/X_train.txt", quote="\"")
#Test Data
y_test <- read.table("./test/y_test.txt", quote="\"")
X_test <- read.table("./test/X_test.txt", quote="\"")
activity_labels <- read.table("activity_labels.txt", quote="\"")
features <- read.table("features.txt", quote="\"")
subject_train <- read.table("./train/subject_train.txt", quote="\"")
subject_test <- read.table("./test/subject_test.txt", quote="\"")
#Standard deviation features:
stddev_features=features$V1[grep("std",features$V2)]
stddev_names=as.character(features$V2[grep("std",features$V2)])
#Mean features:
mean_features=features$V1[grep("mean",features$V2)]
mean_names=as.character(features$V2[grep("mean",features$V2)])
#All features to get
features_to_get=c(stddev_features, mean_features)
cols_to_get=paste("V",features_to_get, sep="")
colNames=c(stddev_names, mean_names)
X_train_subset=subset(X_train, , select=cols_to_get)
names(X_train_subset)=colNames
X_test_subset=subset(X_test, , select=cols_to_get)
names(X_test_subset)=colNames
#Add factor to ID observations as training data
X_train_subset$testtrain="train"
X_test_subset$testtrain="test"
#Map the activity names and add factor
activityNames=merge(activity_labels,y_train)
X_train_subset$activity=activityNames$V2
activityNames=merge(activity_labels,y_test)
X_test_subset$activity=activityNames$V2
#Add the subject Ids
X_train_subset$subjectId=subject_train$V1
X_test_subset$subjectId=subject_test$V1
#Combined training and test data into one dataset
combinedDataset= merge(X_train_subset,X_test_subset,all=TRUE)
setwd(origDir)
#Clean up - removing all data but the combinedDataset
removelist=ls()
#running again to capture removelist!
removelist=ls()
removelist=removelist[removelist != "combinedDataset"]
rm(list=removelist)
head(combinedDataSet)
head(combinedDataset)
summary(combinedDataset)
average(combinedDataset)
avg(combinedDataset)
ave(combinedDataset)
#Getting and Cleaning Data - Course Project
# You should create one R script called run_analysis.R that does the following.
# Merges the training and the test sets to create one data set.
# Extracts only the measurements on the mean and standard deviation for each measurement.
# Uses descriptive activity names to name the activities in the data set
# Appropriately labels the data set with descriptive variable names.
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
origDir=getwd()
setwd("~/Coursera/Getting and Cleaning Data/CourseProject/UCI HAR Dataset/")
#Training Data
y_train <- read.table("./train/y_train.txt", quote="\"")
X_train <- read.table("./train/X_train.txt", quote="\"")
#Test Data
y_test <- read.table("./test/y_test.txt", quote="\"")
X_test <- read.table("./test/X_test.txt", quote="\"")
activity_labels <- read.table("activity_labels.txt", quote="\"")
features <- read.table("features.txt", quote="\"")
subject_train <- read.table("./train/subject_train.txt", quote="\"")
subject_test <- read.table("./test/subject_test.txt", quote="\"")
#Standard deviation features:
stddev_features=features$V1[grep("std",features$V2)]
stddev_names=as.character(features$V2[grep("std",features$V2)])
#Mean features:
mean_features=features$V1[grep("mean",features$V2)]
mean_names=as.character(features$V2[grep("mean",features$V2)])
#All features to get
features_to_get=c(stddev_features, mean_features)
cols_to_get=paste("V",features_to_get, sep="")
colNames=c(stddev_names, mean_names)
X_train_subset=subset(X_train, , select=cols_to_get)
names(X_train_subset)=colNames
X_test_subset=subset(X_test, , select=cols_to_get)
names(X_test_subset)=colNames
#Add factor to ID observations as training data
X_train_subset$testtrain="train"
X_test_subset$testtrain="test"
#Map the activity names and add factor
activityNames=merge(activity_labels,y_train)
X_train_subset$activity=activityNames$V2
activityNames=merge(activity_labels,y_test)
X_test_subset$activity=activityNames$V2
#Add the subject Ids
X_train_subset$subjectId=subject_train$V1
X_test_subset$subjectId=subject_test$V1
#Combined training and test data into one dataset
combinedDataset= merge(X_train_subset,X_test_subset,all=TRUE)
setwd(origDir)
#Clean up - removing all data but the combinedDataset
removelist=ls()
#running again to capture removelist!
removelist=ls()
removelist=removelist[removelist != "combinedDataset"]
rm(list=removelist)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(C(3,4,5,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <-lappy(flags, unique)
unique_vals <-lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
