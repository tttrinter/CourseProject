p$mon
p
p$mday
p$mon
datestring="January 16, 2015 5:59"
datestring
x=strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
?strptime
cube <- function(x,n) {
x^3
}
cube(3)
ls()
rm(list=ls())
ls()
cube <- function(x,n) {
x^3
}
cube(3)
x <-1:10
x
if(x>5) {}
if (x>5) {x<-0}
f=function(x) {
g=function(y) {
y+z
}
z=4
x+g(x)
}
z=10
f(3)
x=5
y=if(x<3) {NA} else {10}
y
?environment
parent.frame
?parent.frame
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created=h5createFile("example.h5")
created
created=h5createGroup("example.h5","foo")
created=h5createGroup("example.h5","baa")
created=h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A=matrix(1:10,nr=5,nc=2)
h5Write(A,"example.h5","foo/A")
h5write(A,"example.h5","foo/A")
B=array(seq(0.1,2.0, by=0.1),dim(c(5,2,2))
)
B=array(seq(0.1,2.0, by=0.1),dimc(5,2,2))
B=array(seq(0.1,2.0, by=0.1),dim=c(5,2,2))
B
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df=data.frame(1L:5L, seq(0,1,length.out=5),c("ab","cde","fghi","a","s"),stringsAsFactors=FALSE)
df
h5write(df,"example.h5","df")
h5ls("example.h5")
readA=h5read("example.h5","foo/A")
readB=h5read("example.h5","foo/foobaa/B")
readf=h5read("example.h5","df")
readA
h5write(c(12,13,15),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
h5read("example.h5","foo/A", index=list(1:3,1))
con=url("https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readLines(con)
close(con)
htmlCode
library(XML)
url ="https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html= <-htmlTreeParese(url,useInternalNodes=TRUE)
html <-htmlTreeParese(url,useInternalNodes=TRUE)
html <-htmlTreePares(url,useInternalNodes=TRUE)
html <-htmlTreeParse(url,useInternalNodes=TRUE)
html
xpathSApply(html,"//title",xmlValue)
url= "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url,useInternalNodes=TRUE)
xpathSApply(html,"//title",xmlValue)
html
library(httr)
html2=GET(url)
url
content2=content(html2,as="text")
parsedHtml= htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
pg1=GET("http://https//httpbin.org/basic-auth/user/passwd")
pg1=GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2=GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd")
)
pg2
names(pg2)
pg2$names
myapp=oath_app("GitHubApp", key="4cff8889ab650dbbd7e3",secret="34e6657d9145d8c667f5cdbac0fd965a7e7aab65")
myapp=oauth_app("GitHubApp", key="4cff8889ab650dbbd7e3",secret="34e6657d9145d8c667f5cdbac0fd965a7e7aab65")
sig = sign_oauth1.0(myapp,token=)
rm(list=ls())
client_id="4cff8889ab650dbbd7e3"
client_secret="34e6657d9145d8c667f5cdbac0fd965a7e7aab65"
authorization_base_url="https://github.com/login/oauth/authorize"
token_url="https://github.com/login/oauth/access_token"
library(jsonlite)
library('jsonlite')
library(httr)
library(httpuv)
install.packages('httpuv')
library(httpuv)
ls()
myapi= oauth_app("GitHubApp",client_id,secret=client_secret)
github_token=oauth2.0_token(oauth_endpoints("github"),myapi)
gethub_token
github_token
github_token=oauth2.0_token(oauth_endpoints("github"),myapi)
rm(list=ls())
client_id="4cff8889ab650dbbd7e3"
client_secret="34e6657d9145d8c667f5cdbac0fd965a7e7aab65"
myapp = oauth_app("GitHubApp",client_id)
GITHUB_CONSUMER_SECRET=client_secret
myapp = oauth_app("GitHubApp",client_id)
GITHUBAPP_CONSUMER_SECRET=client_secret
rm(GITHUBAPP_CONSUMER_SECRET)
myapp = oauth_app("GitHubApp",client_id)
GITHUBAPP_CONSUMER_SECRET
GITHUBAPP_CONSUMER_SECRET=client_secret
client_secret
GITHUBAPP_CONSUMER_SECRET
myapp = oauth_app("GitHubApp",client_id)
myapp = oauth_app("GitHubApp",client_id, GITHUBAPP_CONSUMER_SECRET=client_secret)
myapp = oauth_app("GitHubApp",client_id)
myapp
github_token=oauth2.0_token(oauth_endpoints("github"),myapi)
github_token=oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken=config(token=github_token)
JLeekURL="https://api.github.com/users/jtleek/repos"
req=GET(JLeekURL,gtoken)
stop_for_status(req)
content(req)
gtoken
req = with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
content(req)
myapp = oauth_app("github",client_id)
github_token=oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken=config(token=github_token)
req=GET(JLeekURL,gtoken)
content(req)
gtoken
req <-GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
req <-GET("https://api.github.com/rate_limit",gtoken)
content(req)
library(httr)
github_token=oauth2.0_token(oauth_endpoints("github"),myapp)
req <-GET("https://api.github.com/rate_limit",gtoken)
content(req)
myapp=oauth_app("github", client_id, client_secret)
myapp
github_token=oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken=config(token=github_token)
req <-GET("https://api.github.com/rate_limit",gtoken)
content(req)
req <-GET("https://api.github.com/users/jtleek/repos",gtoken)
content(req)
names(req)
content(req)
req
library(jsonlite)
jsonData = fromJSON(content(req))
content(req)
names(content(req))
content(req)
names(re)
names(req)
req$all_headers
content(req)
names(req)
names(req$content)
names(req$headers)
names(req$url)
req$url
req$headers
names(req$headers)
names(req)
names(req$content)
req$url
document=fromJSON(req(content))
content(req)
req
document=fromJSON(content(req))
content(req)
req
document=fromJSON(req)
req
names(req)
req$request
req$content
content(req)
str(raw_result)
str(content(req))
jsoned=fromJSON(str(content(req)))
jsoned=fromJSON(str(content(req)))
jsoned=fromJSON(content(req))
jsoned=toJSON(str(content(req)))
jsoned
names(jsoned)
jsoned=fromJSON(jsoned)
jsoned
names(jsoned)
req
content(req)
str(content(req))
toJSON(str(content(req)))
converted = toJSON(str(content(req)))
converted
rm(converted)
rm(jsoned)
serializeJSON(content(req))
jsoned= serializeJSON(content(req))
jsoned
names(jsoned)
jsoned2=fromJSON(jsoned)
jsoned2
names(jsoned2)
doc=xmlParse(jsoned2)
doc=xmlParse(jsoned2, package="JSON")
xmlTreeParse(jsoned2, InternalNodes=TRUE)
data=xmlTreeParse(jsoned2,useInternalNodes=TRUE)
data
rm(list=ls())
oath_endpoints("github")
oauth_endpoints("github")
client_id="4cff8889ab650dbbd7e3"
client_secret="34e6657d9145d8c667f5cdbac0fd965a7e7aab65"
myapp=oauth_app("github",client_id,client_secret)
github_token=oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken=config(token=github_token)
req=GET("https://api.github.com/users/jtleek/repos",gtoken)
json1=content(req)
json2=jsonlite::fromJSON(toJSON(json1))
json2
json2[1,1:4]
json2[1]
names(json2)
json2$name
names(json2$name)
json2$name
head(json2)
json2$datasharing
json2$name[datasharing]
head(json2)
json2$name
json2$name["datasharing"]
json2$name$datasharing
xmlparse(json2)
json2
names(json2)
json2$name
names=json2$name
names
rm(names)
json2$name
json2
colnames(json2)
json2[5]
json2[5,]
json2[5,]$created_at
acs=read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
acs
names(acs)
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
htmlDoc=read.html("http://biostat.jhsph.edu/~jleek/contact.html")
webURL="http://biostat.jhsph.edu/~jleek/contact.html"
con=url(webURL)
htmlCode=readLines(con)
htmlCode
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[3.0])
nchar(htmlCode[30])
nchar(htmlCode[100.])
nchar(htmlCode[100])
rm(list=ls())
close(con)
con
htmlURL="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
doc=read.table(htmlURL)
doc=read.table(htmlURL, skip=2, header=TRUE)
doc=read.table(htmlURL, skip=3, header=TRUE)
doc=read.table(htmlURL, skip=4, header=TRUE)
doc=read.table(htmlURL, skip=5)
doc=read.table(htmlURL, skip=6)
doc=read.table(htmlURL, skip=7)
doc=read.table(htmlURL, skip=4, header=TRUE, sep="\t")
doc
names(doc)
doc=read.table(htmlURL, skip=2., header=TRUE, sep="\t")
doc(1:10)
head(doc)
doc=read.table(htmlURL, skip=3, header=TRUE, sep="\t")
head(doc)
colnames=c("week","Nino1+2","Nino3","Nino4")
colnames(doc)=colnames
colnames
colnames=c("id",colnames)
colnames
colnames(doc) = colnames
colnames(doc) <- colnames
length(doc[1])
names(doc)
doc[1].name
name(doc[1])
names(doc)
setnames(doc,colnames)
library(data.table)
setnames(doc,colnames)
doc
doc[1,1]
doc[1]
rm(doc)
doc=read.table(htmlURL, skip=2, header=TRUE, sep="\t")
doc
head(doc)
names(doc)
doc=read.table(htmlURL, skip=4, header=FALSE, sep="\t")
head(doc)
ncol(doc)
doc=read.fwf(htmlURL, skip=4, header=FALSE, sep="\t")
doc=read.fwf(htmlURL, widths=9,skip=4, header=FALSE, sep="\t")
doc
doc=read.table(htmlURL, skip=4, header=FALSE, sep="     ")
doc=read.fwf(htmlURL, widths=9,skip=4, header=FALSE)
doc
head(doc)
doc=read.fwf(htmlURL, widths=10,skip=4, header=TRUE)
doc
names(doc)
head(doc)
doc=read.fwf(htmlURL, widths=9,skip=4, header=TRUE)
head(doc)
doc=read.fwf(htmlURL, widths=9,skip=2, header=TRUE)
head(doc)
widths=c(9,8,8,8,8)
doc=read.fwf(htmlURL, widths=widths,skip=2, header=TRUE)
read.file(htmlURL)
read.table(htmlURL)
doc=read.fwf(htmlURL, widths=widths,skip=3)
doc
names(doc)
doc=read.fwf(htmlURL, widths=widths,skip=2)
names(doc)
head(doc)
doc=read.fwf(htmlURL, widths=widths,skip=3)
dox
doc
head(doc)
doc$week
doc$V1
widths=c(10,8,8,8,8)
doc=read.fwf(htmlURL, widths=widths,skip=3)
head(doc)
doc=read.fwf(htmlURL, widths=widths,skip=4)
head(doc)
widths
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="/t",strip.white=TRUE )
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t",strip.white=TRUE )
head(doc)
widths
widths=widths+5
widths
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t")
head(doc)
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", stril.white=TRUE)
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths(c(9,3,3,3,3,3,3,3,3))
widths = (c(9,3,3,3,3,3,3,3,3))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths = (c(14,3,3,3,3,3,3,3,3))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths = (c(14,4,3,4,3,4,3,4,3))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths = (c(14,4,3,4,3,4,3,4,3))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths = (c(15,4,3,4,3,4,3,4,3))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
widths = (c(15,4,3,4,3,4,3,4,3))
head(doc)
widths = (c(15,4,4,4,4,4,4,4,4))
widths = (c(15,4,3,4,3,4,3,4,3))
widths = (c(15,4,4,4,4,4,4,4,4))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
widths = (c(15,4,9,4,9,4,9,4,4))
doc=read.fwf(htmlURL, widths=widths,skip=4, sep="\t", strip.white=TRUE)
head(doc)
doc$V4
sum(doc$V4)
htmlDoc=read.html("http://biostat.jhsph.edu/~jleek/contact.html")
htmlDoc=URL("http://biostat.jhsph.edu/~jleek/contact.html")
htmlDoc=getURL("http://biostat.jhsph.edu/~jleek/contact.html")
library(html)
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readlines(con)
htmlCode=readLines(con)
htmlCode[01]
nchar(htmlCode[10])
nchar(htmlCode[100])
nchar(htmlCode[30])
htmlURL
rm(list=ls())
getwd()
origDir=getwd()
setwd("~/Coursera/Getting and Cleaning Data/CourseProject/UCI HAR Dataset/")
#Training Data
y_train <- read.table("./train/y_train.txt", quote="\"")
X_train <- read.table("./train/X_train.txt", quote="\"")
subject_train <- read.table("./train/subject_train.txt", quote="\"")
#Test Data
y_test <- read.table("./test/y_test.txt", quote="\"")
X_test <- read.table("./test/X_test.txt", quote="\"")
subject_test <- read.table("./test/subject_test.txt", quote="\"")
activity_labels <- read.table("activity_labels.txt", quote="\"")
features <- read.table("features.txt", quote="\"")
#Standard deviation features:
stddev_features=features$V1[grep("std",features$V2)]
stddev_names=as.character(features$V2[grep("std",features$V2)])
#Mean features:
mean_features=features$V1[grep("mean",features$V2)]
mean_names=as.character(features$V2[grep("mean",features$V2)])
#All features to get
features_to_get=c(stddev_features, mean_features)
cols_to_get=paste("V",features_to_get, sep="")
colNames=c(stddev_names, mean_names)
X_train_subset=subset(X_train, , select=cols_to_get)
names(X_train_subset)=colNames
X_test_subset=subset(X_test, , select=cols_to_get)
names(X_test_subset)=colNames
activityNames=sapply(y_train, activity_labels[y_train$V1])
y_train$V1
activity_labels[1]
activity_labels$V2[1]
activityNames=sapply(y_train, activity_labels$V2[y_train$V1])
activityNames=sapply(y_train, function(x) {activity_labels$V2[y_train$V1]})
activityNames
head(activityNames)
activityNames=sapply(y_train, function(x) {
activity_labels$V2[y_train$V1]})
X_train_subset$activity=activityNames$V1
activityNames=sapply(y_train, function(x) {
activity_labels$V2[y_train$V1]})
activityNames=sapply(y_train, function(x) {activity_labels$V2[y_train$V1]})
activityNames
head(activityNames)
head(activityNames$V1)
class(activityNames)
activityNames[,1]
class(activityNames[,1])
activityNames=sapply(y_train, function(x) {
activity_labels$V2[y_train$V1]})
X_train_subset$activity=activityNames[$V],1]
X_train_subset$activity=activityNames[,1]
View(X_train_subset)
activityNames=sapply(y_test, function(x) {
activity_labels$V2[y_test$V1]})
X_test_subset$activity=activityNames[,1]
library(plyr)
indices=c("subjectId","activity")
X_train_subset$subjectId=subject_train$V1
X_test_subset$subjectId=subject_test$V1
indices
ddply(combinedDataset,c("subjectId","activity"),ave)
ddply(X_train_subset,c("subjectId","activity"),ave)
ddply(X_train_subset,x_train$subjectId,ave)
ddply(X_train_subset,X_train_subset$subjectId,ave)
warnings()
combinedDataset= merge(X_train_subset,X_test_subset,all=TRUE)
combinedDataset
summary(combinedDataset)
str(combinedDataset)
summary(combinedDataset)
ddply(X_train_subset,.(subjectId,activity),mean)
ddply(X_train_subset,.(subjectId,activity),numcolwise(mean))
results=ddply(X_train_subset,.(subjectId,activity),numcolwise(mean))
head(results)
results=ddply(X_train_subset,.(subjectId,activity),numcolwise(ave))
head(results)
names(results)
results$tBodyAcc-std()-X
results$"tBodyAcc-std()-X"
View(results)
results=ddply(X_train_subset,.(subjectId,activity),numcolwise(mean))
View(results)
rm(list=ls())
source('~/Coursera/Getting and Cleaning Data/CourseProject/run_analysis.R')
source('~/Coursera/Getting and Cleaning Data/CourseProject/run_analysis.R')
View(results)
write.table(averages, file="averages.txt",row.name=FALSE)
write.table(results, file="results.txt",row.name=FALSE)
